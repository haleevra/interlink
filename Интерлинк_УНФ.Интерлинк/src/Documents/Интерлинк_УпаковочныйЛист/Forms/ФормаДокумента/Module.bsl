&НаСервере
Функция МассивОтбора()
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокДокументов.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК СписокДокументов
	|ГДЕ
	|	СписокДокументов.Ссылка.Проведен"
	;
	Запрос = Новый Запрос(ТекстЗапроса);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
КонецФункции

&НаКлиенте
Процедура Подобрать(Команда)
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
		
	ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ПравоеЗначение = МассивОтбора();
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Объект.Организация;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, ФиксированныеНастройки", Ложь, Истина, НастройкиКомпоновкиДанных);
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора",  ПараметрыПодбора, Элементы.Документы);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДокументОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ДокументОбработкаВыбораНаСервере(МассивВыбора)
	Для Каждого Значение Из МассивВыбора Цикл
		Если Объект.СписокДокументов.НайтиСтроки(Новый Структура("ЗаказПокупателя", Значение)).Количество() = 0 Тогда
			НоваяСтрока = Объект.СписокДокументов.Добавить();
			НоваяСтрока.ЗаказПокупателя = Значение;

			НоваяСтрока.РасходнаяНакладная = Документы.РасходнаяНакладная.НайтиПоРеквизиту("Заказ", Значение);
			СчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(НоваяСтрока.РасходнаяНакладная, Ложь);
			Если СчетФактура <> Неопределено Тогда
				НоваяСтрока.СчетФактура = СчетФактура.Ссылка;
			Иначе
				НоваяСтрока.СчетФактура = Неопределено;
			КонецЕсли;
			
//			Если НЕ ТолькоЧтение Тогда 
//				Строка.Номер = Строка(Число(ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Заказ.Дата, Заказ.Номер, Заказ.Организация.Префикс)));
//				Строка.Дата = Заказ.Дата;
//				Строка.Договор = Заказ.Договор;
				УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, НоваяСтрока, "КлючСвязи", 0);
				//НоваяСтрока.Магазин = Значение.Грузополучатель;
			
//				Строка.ЕстьРТиУ = ЗначениеЗаполнено(Строка.РТиУ);
//				Строка.ЕстьСФ = ЗначениеЗаполнено(Строка.СчетФактура);	
//			КонецЕсли;

			Для Каждого СтрокаЗапасов Из Значение.Запасы Цикл
				НоваяСтрокаТоваров = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаЗапасов);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, НоваяСтрока);
				НоваяСтрокаТоваров.Магазин = НоваяСтрока.ЗаказПокупателя.Грузополучатель;
			КонецЦикла;	
					
		КонецЕсли;
	КонецЦикла;
	ОбновитьПараметрыВыбораМагазин();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекстВопроса = НСтр("ru='Вы действительно хотите удалить выделенные строки?
	|Данные размещения товаров выбранных заказов будут удалены!'"); 
    ОписаниеОповещения = Новый ОписаниеОповещения("ДокументыПередУдалениемЗавершение", ЭтотОбъект, Отказ); 
    ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалениемЗавершение(Результат, Отказ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивОтбора = Новый Массив;
		Для Каждого ИдентификаторДокумента Из Элементы.Документы.ВыделенныеСтроки Цикл
			СтрокаКУдалению = Объект.СписокДокументов.НайтиПоИдентификатору(ИдентификаторДокумента);
			МассивОтбора.Добавить(СтрокаКУдалению.КлючСвязи);			
		КонецЦикла;
		ДокументыПередУдалениемНаСервере(МассивОтбора, Элементы.Документы.ВыделенныеСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДокументыПередУдалениемНаСервере(МассивОтбора, Знач МассивУдаления)
	
	Для Каждого КлючСвязи Из МассивОтбора Цикл
		Отбор = Новый Структура("КлючСвязи", КлючСвязи);
		УдалитьТовары = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаКУдалению Из УдалитьТовары Цикл
			Объект.Товары.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ИдентификаторДокумента Из МассивУдаления Цикл
		СтрокаКУдалению = Объект.СписокДокументов.НайтиПоИдентификатору(ИдентификаторДокумента);
		Объект.СписокДокументов.Удалить(СтрокаКУдалению);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыВыбораМагазин()
	МассивМагазинов = Новый Массив();
	Если Объект.СписокДокументов.Количество() > 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Магазин КАК Магазин
		|ПОМЕСТИТЬ ВТ_Магазины
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Фильтр = ""Все""
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ Товары.Паллета = 0
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Магазины.Магазин КАК Магазин
		|ИЗ
		|	ВТ_Магазины КАК ВТ_Магазины"
		;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("Фильтр", Фильтр);
		МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
	КонецЕсли;
	
	Отбор = Новый ФиксированныйМассив(МассивМагазинов);
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", Отбор);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрВыбора);
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

	Элементы.Магазин.ПараметрыВыбора = НовыеПараметрыВыбора;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораПаллета()
	Если ЗначениеЗаполнено(Магазин) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыНаПаллетах.Паллета,
		|	ТоварыНаПаллетах.Магазин
		|ПОМЕСТИТЬ ВТ_ПаллетыМагазин
		|ИЗ
		|	&ТоварыНаПаллетах КАК ТоварыНаПаллетах
		|ГДЕ ТоварыНаПаллетах.Паллета > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПаллетыМагазин.Паллета
		|ИЗ
		|	ВТ_ПаллетыМагазин КАК ВТ_ПаллетыМагазин
		|ГДЕ
		|	ВТ_ПаллетыМагазин.Магазин = &Магазин"
		;
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ТоварыНаПаллетах", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("Магазин", Магазин);
		
		МассивВыбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Паллета");
	Иначе
		МассивВыбора = Новый Массив;
	КонецЕсли;
	
	Элементы.Паллета.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	//Если МассивВыбора.Найти(Паллета) = Неопределено Тогда 
	//	Паллета = 0;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПаллетаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Паллета) Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("Паллета, Магазин", Паллета, Магазин);
	Иначе
		ОтборСтрок = Новый ФиксированнаяСтруктура("Магазин", Магазин);
	КонецЕсли;
	
	Элементы.ТоварыНаПаллетах.ОтборСтрок = ОтборСтрок;
	Элементы.ТоварыНаПаллетахПаллета.Видимость = НЕ ЗначениеЗаполнено(Паллета);
	Элементы.ГруппаКнопки.Доступность = ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(Паллета);
	Элементы.ГруппаПаллетыКнопки.Доступность = ЗначениеЗаполнено(Магазин) И Фильтр = "К размещению";
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПаллету(Команда)
	УдалитьПаллетуНаСервере();
	ОбновитьСписокВыбораПаллета();
	ПаллетаПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ОбновитьМагазин()
	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Паллета", Паллета));
	Если МассивСтрок.Количество() > 0 Тогда
		Магазин = МассивСтрок[0].Магазин;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьПаллетуНаСервере()
	Если ЗначениеЗаполнено(Паллета) Тогда
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Магазин, Паллета", Магазин, Паллета));
		Для Каждого СтрокаНаПаллетах Из МассивСтрок Цикл
			СтрокаНаПаллетах.Паллета = 0;
		КонецЦикла;
		Паллета = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПаллету(Команда)
	Паллета = МаксПаллета() + 1;
	ОбновитьСписокВыбораПаллета();
	ПаллетаПриИзменении(Неопределено); 
КонецПроцедуры

&НаСервере
Функция МаксПаллета()
	Результат = 0;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Паллета КАК Паллета
	|ПОМЕСТИТЬ ВТ_ПаллетыМагазина
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ПаллетыМагазина.Паллета) КАК Паллета
	|ИЗ
	|	ВТ_ПаллетыМагазина КАК ВТ_ПаллетыМагазина"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Паллета;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТоварыКРазмещениюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Магазин) И Фильтр = "Все" Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("Магазин", Магазин);
	ИначеЕсли ЗначениеЗаполнено(Магазин) Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("Паллета, Магазин", 0, Магазин);
	ИначеЕсли Фильтр = "Все" Тогда
		ОтборСтрок = Неопределено;
	Иначе
		ОтборСтрок = Новый ФиксированнаяСтруктура("Паллета", 0);
	КонецЕсли;
	Элементы.ТоварыКРазмещению.ОтборСтрок = ОтборСтрок;
	Элементы.ТоварыКРазмещениюМагазин.Видимость = НЕ ЗначениеЗаполнено(Магазин);
	ОбновитьСписокВыбораПаллета();
	Паллета = 0;
	ПаллетаПриИзменении(Неопределено);
	Элементы.ГруппаКнопки.Доступность = ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(Паллета);
	Элементы.ГруппаПаллетыКнопки.Доступность = ЗначениеЗаполнено(Магазин) И Фильтр = "К размещению";
КонецПроцедуры

&НаКлиенте
Процедура Разместить(Команда)
	РазместитьНаСервере("ТоварыКРазмещению", Паллета);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКРазмещениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		Магазин = Элемент.ТекущиеДанные.Магазин;
		МагазинПриИзменении(Неопределено);
	ИначеЕсли ЗначениеЗаполнено(Паллета) Тогда
		РазместитьНаСервере("ТоварыКРазмещению", Паллета);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для выполнения команды требуется выбрать Паллету.'");
		Сообщение.Поле = "Паллета";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КРазмещению(Команда)
	РазместитьНаСервере("ТоварыНаПаллетах");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаПаллетахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РазместитьНаСервере("ТоварыНаПаллетах");
КонецПроцедуры

&НаСервере
Процедура РазместитьНаСервере(ИмяЭлемента, ПаллетаЗначение = 0)
	Для Каждого СтрокаКРазмещениюИдентификатор Из Элементы[ИмяЭлемента].ВыделенныеСтроки Цикл
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаКРазмещениюИдентификатор);
		СтрокаТовары.Паллета = ПаллетаЗначение;
	КонецЦикла;
	Товары = Объект.Товары.Выгрузить();
	Товары.Свернуть("Магазин,Паллета,Номенклатура,КлючСвязи","Количество");
	Объект.Товары.Загрузить(Товары);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	ПаллетаПриИзменении(Неопределено);
	МагазинПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	Фильтр = "К размещению";
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКРазмещениюПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаПаллетахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаПаллетахПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьПараметрыВыбораМагазин();
КонецПроцедуры

&НаКлиенте
Процедура МагазинНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбновитьПараметрыВыбораМагазин(); 
КонецПроцедуры

&НаКлиенте
Процедура РазместитьЧастично(Команда)
	ТаблицаФормы  = Элементы.ТоварыКРазмещению;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	Интерлинк_УпаковочныеЛисты.РазбитьСтрокуТЧСУпаковочнымиЛистами(ДанныеТаблицы, ТаблицаФормы, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	НоваяСтрока.Паллета = Паллета;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	ОбновитьПараметрыВыбораМагазин();
	МагазинПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
		
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства







