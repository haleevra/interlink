
#Область ИнтерфейсПечати

#Область СлужебныеПроцедурыИФункции

//Процедура получения данных по упаковочному листу
//
Процедура ПолучитьДанныеПоУпаковочномуЛисту(ДанныеДокумента, ТекущийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",  ТекущийДокумент);
	Запрос.УстановитьПараметр("ШтукаНаименование", Справочники.КлассификаторЕдиницИзмерения.шт.Наименование);
	Запрос.УстановитьПараметр("ШтукаКод", Справочники.КлассификаторЕдиницИзмерения.шт.Код);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Организация КАК Организация,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.ПодписьКладовщика КАК ПодписьКладовщика,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.ПодписьРуководителя КАК ПодписьРуководителя,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Контрагент КАК Контрагент,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Перевозчик КАК Перевозчик,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Курс КАК Курс,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Кратность КАК Кратность,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.ДоверенностьНомер КАК ДоверенностьНомер,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.ДоверенностьДата КАК ДоверенностьДата,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Автомобиль КАК Автомобиль,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Прицеп КАК Прицеп,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Водитель КАК Водитель,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Вес КАК Вес,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Объем КАК Объем,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.НоменклатураДоставки КАК НоменклатураДоставки,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.СтоимостьДоставки КАК СтоимостьДоставки,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.СтавкаНДСДоставки КАК СтавкаНДСДоставки
	|ПОМЕСТИТЬ ВТ_РасходнаяНакладная
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка = &ТекущийДокумент
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Интерлинк_УпаковочныйЛист.Номер КАК Номер,
	|	Интерлинк_УпаковочныйЛист.Ссылка КАК ТекущийДокумент,
	|	Интерлинк_УпаковочныйЛист.Дата КАК ДатаДокумента,
	|	Интерлинк_УпаковочныйЛист.ОжидаемаяДатаВручения КАК СрокДоставки,
	|	ВТ_РасходнаяНакладная.Организация КАК Организация,
	|	ВТ_РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	ВТ_РасходнаяНакладная.Организация КАК ЮрФизЛицо,
	|	ВТ_РасходнаяНакладная.Организация КАК Поставщик,
	|	ВТ_РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_РасходнаяНакладная.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	ВТ_РасходнаяНакладная.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	ВТ_РасходнаяНакладная.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	ВТ_РасходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	ВТ_РасходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	ВТ_РасходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	ВТ_РасходнаяНакладная.Организация КАК Грузоотправитель,
	|	""ООО «СТС Логистикс Склады», Московская область, Солнечногорский район, сельское поселение Пешковское, д. Шелепаново, строение 152/1"" КАК Грузополучатель,
	|	ВТ_РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_РасходнаяНакладная.Контрагент КАК Покупатель,
	|	ВТ_РасходнаяНакладная.Контрагент КАК Плательщик,
	|	ВТ_РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетПлательщика,
	|	ВТ_РасходнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	ВТ_РасходнаяНакладная.Перевозчик КАК Перевозчик,
	|	НацВалюта.Значение КАК ВалютаДокумента,
	|	ВТ_РасходнаяНакладная.Курс КАК Курс,
	|	ВТ_РасходнаяНакладная.Кратность КАК Кратность,
	|	ВТ_РасходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ВТ_РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_РасходнаяНакладная.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ВТ_РасходнаяНакладная.ДоверенностьДата КАК ДоверенностьДата,
	|	ВТ_РасходнаяНакладная.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ВТ_РасходнаяНакладная.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	ВТ_РасходнаяНакладная.СтруктурнаяЕдиница.МОЛ КАК Кладовщик,
	|	ВТ_РасходнаяНакладная.Автомобиль КАК Автомобиль,
	|	ВТ_РасходнаяНакладная.Автомобиль.Марка КАК МаркаАвтомобиля,
	|	ВТ_РасходнаяНакладная.Автомобиль.Код КАК ГосНомерАвтомобиля,
	|	ВТ_РасходнаяНакладная.Прицеп КАК Прицеп,
	|	ВТ_РасходнаяНакладная.Прицеп.Марка КАК МаркаПрицепа,
	|	ВТ_РасходнаяНакладная.Прицеп.Код КАК ГосНомерПрицепа,
	|	ВТ_РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка КАК ДействующаяЛицензионнаяКарточка,
	|	ВТ_РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.РегистрационныйНомерВГосударственномОргане КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ВТ_РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.СерияЛицензионнойКарты КАК ЛицензионнаяКарточкаСерия,
	|	ВТ_РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.НомерЛицензионнойКарты КАК ЛицензионнаяКарточкаНомер,
	|	ВТ_РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.ВидДеятельности КАК ЛицензионнаяКарточкаВидДеятельности,
	|	ВТ_РасходнаяНакладная.Водитель КАК Водитель,
	|	ВТ_РасходнаяНакладная.Вес КАК Вес,
	|	ВТ_РасходнаяНакладная.Объем КАК Объем,
	|	ВТ_РасходнаяНакладная.НоменклатураДоставки КАК НоменклатураДоставки,
	|	""Мебель садовая"" КАК ПредставлениеНоменклатурыДоставки,
	|	""-"" КАК АртикулДоставки,
	|	""-"" КАК КодДоставки,
	|	""паллет"" КАК ЕдиницаИзмеренияДоставки,
	|	""-"" КАК КодЕдиницыИзмеренияДоставки,
	|	ВТ_РасходнаяНакладная.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ВТ_РасходнаяНакладная.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ВТ_РасходнаяНакладная.СуммаНДСДоставки КАК СуммаНДСДоставки
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист КАК Интерлинк_УпаковочныйЛист,
	|	Константа.НациональнаяВалюта КАК НацВалюта,
	|	ВТ_РасходнаяНакладная КАК ВТ_РасходнаяНакладная
	|ГДЕ
	|	Интерлинк_УпаковочныйЛист.Ссылка = &ТекущийДокумент"
	;
	
	ДанныеДокумента = Запрос.Выполнить().Выгрузить();
	ДанныеДокумента.Колонки.Добавить("ТаблицаЗапасы");
	ДанныеДокумента.Колонки.Добавить("СведенияОГрузе");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",  ТекущийДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛистТовары.Магазин КАК Магазин,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерлинк_УпаковочныйЛистТовары.Паллета) КАК Паллета
	|ПОМЕСТИТЬ ВТ_МагазинПаллеты
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.Товары КАК Интерлинк_УпаковочныйЛистТовары
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистТовары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Интерлинк_УпаковочныйЛистТовары.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_МагазинПаллеты.Паллета) КАК Паллета
	|ПОМЕСТИТЬ ВТ_Паллеты
	|ИЗ
	|	ВТ_МагазинПаллеты КАК ВТ_МагазинПаллеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.СуммаДокумента) КАК РасходнаяНакладнаяСуммаДокумента,
	|	СУММА(Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Вес) КАК РасходнаяНакладнаяВес
	|ПОМЕСТИТЬ ВТ_МагазинСумма
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛист.Ссылка КАК Ссылка,
	|	1 КАК Номер,
	|	""Мебель садовая"" КАК Номенклатура,
	|	""Мебель садовая"" КАК ЗапасНаименование,
	|	""-"" КАК КодПродукции,
	|	""-"" КАК Артикул,
	|	ВТ_МагазинСумма.РасходнаяНакладнаяВес КАК МассаНетто,
	|	ВТ_МагазинСумма.РасходнаяНакладнаяВес + ВТ_Паллеты.Паллета * 30 КАК МассаБрутто,
	|	0 КАК Объем,
	|	0 КАК Количество,
	|	ВТ_Паллеты.Паллета КАК КоличествоМест,
	|	""паллет"" КАК БазоваяЕдиницаНаименование,
	|	""А"" КАК ЕдиницаИзмеренияДокумент,
	|	""А"" КАК ВидУпаковки,
	|	""-"" КАК БазоваяЕдиницаКодПоОКЕИ,
	|	1 КАК Коэффициент,
	|	NULL КАК Характеристика,
	|	NULL КАК СтавкаНДС,
	|	""Мебель садовая"" КАК Содержание,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	ЛОЖЬ КАК НеобходимоВыделитьКакСоставНабора,
	|	NULL КАК НоменклатураНабора,
	|	NULL КАК ХарактеристикаНабора,
	|	0 КАК СуммаВВалютеДокумента,
	|	0 КАК СуммаНДСВВалютеДокумента,
	|	0 КАК ВсегоВВалютеДокумента,
	|	0 КАК СуммаСкидкиПоСтроке,
	|	0 КАК Цена,
	|	ВТ_МагазинСумма.РасходнаяНакладнаяСуммаДокумента КАК Сумма,
	|	0 КАК СуммаНДС,
	|	ВТ_МагазинСумма.РасходнаяНакладнаяСуммаДокумента КАК Всего
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист КАК Интерлинк_УпаковочныйЛист,
	|	Константа.НациональнаяВалюта КАК НацВалюта,
	|	ВТ_Паллеты КАК ВТ_Паллеты,
	|	ВТ_МагазинСумма КАК ВТ_МагазинСумма"
	;
	
	ТЗСтрок = Запрос.Выполнить().Выгрузить();
	
	РасходнаяНакладнаяНомер = Новый СписокЗначений;
	Для Каждого СтрокаДокументов Из ТекущийДокумент.СписокДокументов Цикл
		
		РасходнаяНакладнаяНомер.Добавить(ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(СтрокаДокументов.РасходнаяНакладная.Дата,
																										СтрокаДокументов.РасходнаяНакладная.Номер, 
																										СтрокаДокументов.РасходнаяНакладная.Организация.Префикс));
			
	КонецЦикла;
	СведенияОГрузе = Новый Структура;
	СведенияОГрузе.Вставить("ЗапасНаименование", "Мебель садовая");
	СведенияОГрузе.Вставить("РасходнаяНакладнаяНомер", РасходнаяНакладнаяНомер);
	СведенияОГрузе.Вставить("БазоваяЕдиницаНаименование", "паллет");
	
	Для Каждого ТекущаяСтрока Из ДанныеДокумента Цикл
		
		ТекущаяСтрока.ТаблицаЗапасы = ТЗСтрок;
		ТекущаяСтрока.СведенияОГрузе = СведенияОГрузе;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоРасходнойНакладной()

Функция ПредставлениеОснованияПечати(ОснованиеПечатиСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОснованиеПечатиСсылка) Тогда
	
		Возврат "";
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ЗаголовокПредставления = "";
		Если Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить() Тогда
			
			ЗаголовокПредставления = Нстр("ru = 'Договор: '");
			
		КонецЕсли;
		
		Возврат ЗаголовокПредставления + Строка(ОснованиеПечатиСсылка.Наименование);
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПоставщику")
		Тогда
		
		Возврат Строка(ОснованиеПечатиСсылка);
		
	КонецЕсли;
	
КонецФункции

Функция МассаГрузаПрописью(Знач ИтогоМассаБрутто, Знач ДанныеОбъектаВес)
	
	КоэффициентПересчетаВТонны = 0.001;
	
	ЗначениеДляПечати = ИтогоМассаБрутто;
	
	Если Не ЗначениеЗаполнено(ЗначениеДляПечати) Тогда
		ЗначениеДляПечати = ДанныеОбъектаВес;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеДляПечати) ИЛИ ЗначениеДляПечати<0.5 Тогда
		Возврат "";
	КонецЕсли;
	
	Прописью =  ЧислоПрописью(
	Окр(ЗначениеДляПечати * КоэффициентПересчетаВТонны, 3, РежимОкругления.Окр15как20),
	"ДП=Истина",
	"тонна,тонны,тонн,ж,килограмм,килограмма,килограммов,м,3");
	
	Прописью = СтрЗаменить(Прописью, НСтр("ru = ' ноль килограммов'"), "");
	Прописью = СтрЗаменить(Прописью, НСтр("ru = 'Ноль тонн '"), "");
	
	Возврат Прописью;
	
КонецФункции

Функция ОбъемГрузаПрописью(Знач ИтогоОбъем, Знач ДанныеОбъектаОбъем)
	
	ЗначениеДляПечати = ИтогоОбъем;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеДляПечати) Тогда
		ЗначениеДляПечати = ДанныеОбъектаОбъем;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ЗначениеДляПечати) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = '%1  м³'"), Формат(ЗначениеДляПечати, "ЧГ=0"));
	
КонецФункции

Процедура ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов)
	
	ОбластьИтоговПоСтранице = ОбластиМакета.ОбластьИтоговПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = СтруктураИтогов.ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = СтруктураИтогов.ИтогоСуммаСНДСНаСтранице;
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// очистим итоги по странице
	СтруктураИтогов.ИтогоКоличествоНаСтранице = 0;
	СтруктураИтогов.ИтогоСуммаСНДСНаСтранице  = 0;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	СтруктураИтогов.НомерСтраницы = СтруктураИтогов.НомерСтраницы + 1;
	ОбластиМакета.ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("ru = 'Страница '") + СтруктураИтогов.НомерСтраницы;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьЗаголовокТаблицы);
	
КонецПроцедуры

Функция СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов)
	
	ЕстьВсеОбласти = Истина;
	Для каждого ЭлементСтруктуры Из ОбластиМакета Цикл
		
		Если ЭлементСтруктуры.Значение = Неопределено Тогда
			
			ЕстьВсеОбласти = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьВсеОбласти Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	МассивОбластейМакета = Новый Массив;
	Для Сч = 0 По ОКР(СтрДлина(ОбластиМакета.ОбластьСтрока.Параметры.ЗапасНаименование) / 45, 0, РежимОкругления.Окр15как10) Цикл
		
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьСтрока);
		
	КонецЦикла;
	МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьИтоговПоСтранице);
	
	Если СтруктураИтогов.НомерСтроки = СтруктураИтогов.КоличествоСтрок - 1 Тогда
		
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьВсего);
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьПодвал);
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьТранспортныйРаздел);
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьПодвалСведенийОГрузе);
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьСведенияОГрузе);
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьПогрузочныеОперации);
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьПрочиеСведения);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент.ПроверитьВывод(МассивОбластейМакета)
	
КонецФункции

#КонецОбласти

// Процедура формирования печатной формы ТТН
//
Процедура СформироватьТТН(ТабличныйДокумент, ТекущийДокумент, Ошибки)
	ДанныеДокумента		= Новый Структура;
	ОбластиМакета		= Новый Структура;
	ЗначенияПараметров	= Новый Структура;
	КоэффициентПересчетаВТонны = 0.001;
	
	ПолучитьДанныеПоУпаковочномуЛисту(ДанныеДокумента, ТекущийДокумент);
	Шапка = ДанныеДокумента[0];
	ТабличнаяЧастьДокумента = Шапка.ТаблицаЗапасы;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Интерлинк_УпаковочныйЛист.ПФ_MXL_ТТН");
	ОбластиМакета.Вставить("ОбластьЗаголовокТаблицы",	ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ЗаголовокТаблицы", , Ошибки));
	ОбластиМакета.Вставить("ОбластьИтоговПоСтранице",	ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ИтогоПоСтранице", , Ошибки));
	ОбластиМакета.Вставить("ОбластьСтрока", 			ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Строка", , Ошибки));
	ОбластиМакета.Вставить("ОбластьВсего",				ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Всего", , Ошибки));
	ОбластиМакета.Вставить("ОбластьПодвал",				ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Подвал", , Ошибки));
	ОбластиМакета.Вставить("ОбластьТранспортныйРаздел", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ТранспортныйРаздел", , Ошибки));
	ОбластиМакета.Вставить("ОбластьПодвалСведенийОГрузе", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ПодвалСведенийОГрузе", , Ошибки));
	ОбластиМакета.Вставить("ОбластьСведенияОГрузе",		ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "СведенияОГрузе", , Ошибки));
	ОбластиМакета.Вставить("ОбластьПогрузочныеОперации",ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ПогрузочныеОперации", , Ошибки));
	ОбластиМакета.Вставить("ОбластьПрочиеСведения",		ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ПрочиеСведения", , Ошибки));
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента, , ?(Шапка.Грузоотправитель = Шапка.ЮрФизЛицо, Шапка.БанковскийСчет, Неопределено));
	//СведенияОПокупателе       = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента, , Шапка.БанковскийСчетПлательщика);
	СведенияОПокупателе		  = СведенияОПоставщике;
	СведенияОГрузополучателе  = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерДокумента;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	//Если ПустаяСтрока(Шапка.АдресДоставки) Тогда
	//	
	//	ОбластьМакета.Параметры.ГрузополучательПредставление  = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	//	
	//Иначе
	//	
	//	ПерваяЧастьКИ = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН");
	//	ВтораяЧастьКИ = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	//	
	//	ОбластьМакета.Параметры.ГрузополучательПредставление  = СтрШаблон("%1, %2, %3", ПерваяЧастьКИ, Шапка.АдресДоставки, ВтораяЧастьКИ);
	//	
	//КонецЕсли;
	ОбластьМакета.Параметры.ГрузополучательПредставление = Шапка.Грузополучатель;
	
	//ОбластьМакета.Параметры.ПлательщикПредставление       = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбластьМакета.Параметры.ГрузоотправительПредставление;
	ОбластьМакета.Параметры.ГрузоотправительПоОКПО        = СведенияОГрузоотправителе.КодПоОКПО;
	//ОбластьМакета.Параметры.ГрузополучательПоОКПО         = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО              = СведенияОПокупателе.КодПоОКПО;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ОбластиМакета.ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("ru ='Страница 1'");
	ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьЗаголовокТаблицы);
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	
	// инициализация итогов по документу
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("НомерСтраницы", 1);
	СтруктураИтогов.Вставить("ИтогоКоличествоНаСтранице", 0);
	СтруктураИтогов.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	
	ИтогоМест		= 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоСумма		= 0;
	ИтогоНДС		= 0;
	Ном				= 0;
	ИтогоМассаНетто = 0;
	ИтогоМассаБрутто = 0;
	ИтогоОбъем = 0;
	НомерСтроки = 0;
	
	// Выводим многострочную часть документа
	ОбластьМакета = ОбластиМакета.ОбластьСтрока;
				
	ЭтоРН = (ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.РасходнаяНакладная"));
	ПараметрыНоменклатуры = Новый Структура;
	
	КоличествоСтрок = ТабличнаяЧастьДокумента.Количество();
	СтруктураИтогов.Вставить("КоличествоСтрок", КоличествоСтрок);
	КоличествоСтрокПечать = 0;
	
	Для каждого ВыборкаСтрокЗапасы Из ТабличнаяЧастьДокумента Цикл
		
		//Если ВыборкаСтрокЗапасы.Количество = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если ЭтоРН И ВыборкаСтрокЗапасы.ЭтоНабор Тогда
			НомерСтрокиДляПечати = 0;
		Иначе
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиДляПечати = НомерСтроки;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		
		ПараметрыНоменклатуры.Очистить();
		ПараметрыНоменклатуры.Вставить("Содержание", ВыборкаСтрокЗапасы.Содержание);
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", ВыборкаСтрокЗапасы.ЗапасНаименование);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", ВыборкаСтрокЗапасы.Характеристика);
		ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", ВыборкаСтрокЗапасы.Артикул);
		// Наборы
		Если ЭтоРН Тогда
			ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", ВыборкаСтрокЗапасы.НеобходимоВыделитьКакСоставНабора);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.ЗапасНаименование = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
				
		СуммаСНДС	= ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Всего), 0, ВыборкаСтрокЗапасы.Всего);
		
		Мест		= ВыборкаСтрокЗапасы.КоличествоМест;
		
		Коэффициент = 1;
		Если ТипЗнч(ВыборкаСтрокЗапасы.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			Коэффициент = ВыборкаСтрокЗапасы.Коэффициент;
			
		КонецЕсли;
		Количество = ВыборкаСтрокЗапасы.Количество * Коэффициент;
		
		ОбластьМакета.Параметры.Количество = "-";
		//ОбластьМакета.Параметры.Количество = Количество;
		
		СуммаНДС	= ВыборкаСтрокЗапасы.СуммаНДС;
		СуммаБезНДС = ВыборкаСтрокЗапасы.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокЗапасы.СуммаНДС, 0);
		
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;
		//ОбластьМакета.Параметры.Цена = СуммаСНДС / ?(Количество = 0, 1, Количество);
		ОбластьМакета.Параметры.Цена = "-";
		ОбластьМакета.Параметры.КодПродукции = "-";
		ОбластьМакета.Параметры.НомерПрейскуранта = "-";
		МассаБрутто = Окр(ВыборкаСтрокЗапасы.МассаБрутто*КоэффициентПересчетаВТонны, 3, РежимОкругления.Окр15как20);
		МассаНетто = Окр(ВыборкаСтрокЗапасы.МассаНетто*КоэффициентПересчетаВТонны, 3, РежимОкругления.Окр15как20);
		ПечатьДокументовУНФ.УстановитьПараметрБезопасно(ОбластьМакета, "Масса", МассаНетто);

		СтруктураИтогов.Вставить("НомерСтроки", НомерСтроки);
		Если СтруктураИтогов.НомерСтроки <> 1
			И СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов) = Ложь Тогда
			
			ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов);
			
		КонецЕсли;
		
		Если НЕ ЭтоРН ИЛИ НЕ ВыборкаСтрокЗапасы.ЭтоНабор Тогда
			
			// увеличим итоги по странице
			СтруктураИтогов.ИтогоКоличествоНаСтранице = СтруктураИтогов.ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице		= ИтогоСуммаНаСтранице		+ СуммаБезНДС;
			ИтогоНДСНаСтранице 			= ИтогоНДСНаСтранице		+ СуммаНДС;
			СтруктураИтогов.ИтогоСуммаСНДСНаСтранице = СтруктураИтогов.ИтогоСуммаСНДСНаСтранице + СуммаСНДС;
			
			// увеличим итоги по документу
			ИтогоМест		= ИтогоМест			+ Мест;
			ИтогоКоличество = ИтогоКоличество	+ Количество;
			ИтогоСумма		= ИтогоСумма		+ СуммаБезНДС;
			ИтогоНДС		= ИтогоНДС			+ СуммаНДС;
			ИтогоСуммаСНДС	= ИтогоСуммаСНДС	+ СуммаСНДС;
			ИтогоМассаНетто = ИтогоМассаНетто	+ ВыборкаСтрокЗапасы.МассаНетто;
			ИтогоМассаБрутто = ИтогоМассаБрутто	+ ВыборкаСтрокЗапасы.МассаБрутто;
			ИтогоОбъем 		= ИтогоОбъем	+ ВыборкаСтрокЗапасы.Объем;
			
			КоличествоСтрокПечать = КоличествоСтрокПечать + 1;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Наборы
		Если ЭтоРН Тогда
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, ВыборкаСтрокЗапасы);
		КонецЕсли; 
	
	КонецЦикла;
	
	КоличествоСтрок = КоличествоСтрокПечать;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = ОбластиМакета.ОбластьИтоговПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = СтруктураИтогов.ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = СтруктураИтогов.ИтогоСуммаСНДСНаСтранице;
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = ОбластиМакета.ОбластьВсего;
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = ОбластиМакета.ОбластьПодвал;
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ЗначенияПараметров.Очистить();
	
	ЗначенияПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));	
	ЗначенияПараметров.Вставить("КоличествоСтрок", ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
	
	ЗначенияПараметров.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	ЗначенияПараметров.Вставить("ВсегоКОплате", ИтогоСумма);	
	
	Если ИтогоМест <> 0 Тогда
		
		ЗначенияПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтогоМест, ,",,,,,,,,0"));
		
	КонецЕсли;
	
	ЗначенияПараметров.Вставить("ВсегоНаименований", ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
	
	ЗначенияПараметров.Вставить("ДоверенностьНомер", Шапка.ДоверенностьНомер);
	ЗначенияПараметров.Вставить("ДоверенностьДата", Формат(Шапка.ДоверенностьДата,"ДФ=dd.MM.yyyy"));
	ЗначенияПараметров.Вставить("ДоверенностьВыдана", Шапка.ДоверенностьВыдана);
	ЗначенияПараметров.Вставить("ДоверенностьЛицо", Шапка.ДоверенностьЛицо);
	
	ОтпущеноНаСуммуПрописью = "";
	Если ИтогоСуммаСНДС>0 Тогда
		ОтпущеноНаСуммуПрописью = ОтпущеноНаСуммуПрописью+?(ПустаяСтрока(ОтпущеноНаСуммуПрописью), "", ", ")+
		УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Шапка.ВалютаДокумента);
	КонецЕсли; 
	Если ИтогоМассаБрутто>1 ИЛИ Шапка.Вес>1 Тогда
		ОтпущеноНаСуммуПрописью = ОтпущеноНаСуммуПрописью+?(ПустаяСтрока(ОтпущеноНаСуммуПрописью), "", ", ")+
		НСтр("ru = 'масса брутто: '")+НРег(МассаГрузаПрописью(ИтогоМассаБрутто, Шапка.Вес));
	КонецЕсли; 
	Если ИтогоОбъем>1 ИЛИ Шапка.Объем>1  Тогда
		ОтпущеноНаСуммуПрописью = ОтпущеноНаСуммуПрописью+?(ПустаяСтрока(ОтпущеноНаСуммуПрописью), "", ", ")+
		НСтр("ru = 'объем: '")+ОбъемГрузаПрописью(ИтогоОбъем, Шапка.Объем);
	КонецЕсли;
	ЗначенияПараметров.Вставить("ОтпущеноНаСуммуПрописью", ОтпущеноНаСуммуПрописью);
	
	Если ИтогоМассаНетто>1 ИЛИ Шапка.Вес>1 Тогда
		ЗначенияПараметров.Вставить("МассаГрузаНетто", Окр(ИтогоМассаНетто * КоэффициентПересчетаВТонны, 3, РежимОкругления.Окр15как20));
		ЗначенияПараметров.Вставить("МассаГрузаНеттоПрописью", МассаГрузаПрописью(ИтогоМассаНетто, Шапка.Вес));
	КонецЕсли;
	Если ИтогоМассаБрутто>1 ИЛИ Шапка.Вес>1 Тогда
		ЗначенияПараметров.Вставить("МассаГрузаБрутто", Окр(ИтогоМассаБрутто * КоэффициентПересчетаВТонны, 3, РежимОкругления.Окр15как20));
		ЗначенияПараметров.Вставить("МассаГрузаБруттоПрописью", МассаГрузаПрописью(ИтогоМассаБрутто, Шапка.Вес));
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ЗначенияПараметров);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим транспортный раздел
	ОбластьМакета = ОбластиМакета.ОбластьТранспортныйРаздел;
	ЗначенияПараметров.Очистить();
	
	ЗначенияПараметров.Вставить("Номер", НомерДокумента);
	ЗначенияПараметров.Вставить("СрокДоставки", Формат(Шапка.СрокДоставки, "ДФ=dd.MM.yyyy"));
	
	СведенияОПеревозчике = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Перевозчик,  Шапка.ДатаДокумента);
	ПеревозчикПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПеревозчике, "ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны, НомерСчета, Банк, БИК, КоррСчет");
	//ЗначенияПараметров.Вставить("Перевозчик", ПеревозчикПредставление);
	
	ЗначенияПараметров.Вставить("МаркаАвтомобиля", Шапка.МаркаАвтомобиля);
	ЗначенияПараметров.Вставить("ГосНомерАвтомобиля", Шапка.ГосНомерАвтомобиля);
	
	ЗаказчикПеревозокПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны, НомерСчета, Банк, БИК, КоррСчет");
	//ЗначенияПараметров.Вставить("ЗаказчикПеревозок", ЗаказчикПеревозокПредставление);
	ЗначенияПараметров.Вставить("ЗаказчикПеревозок", "ОБИ");
	
	Если ЗначениеЗаполнено(Шапка.Водитель) Тогда
		
		ДанныеВодителя = Справочники.ФизическиеЛица.ДанныеФизЛица(Шапка.Организация, Шапка.Водитель, Шапка.ДатаДокумента, Истина);
		
		ЗначенияПараметров.Вставить("Водитель", ДанныеВодителя.Представление);
		
		ДокументыФизическихЛиц = Справочники.ФизическиеЛица.ДокументФизЛицаПоВиду(Шапка.ДатаДокумента, Шапка.Водитель, Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
		Если ДокументыФизическихЛиц.Количество() > 0 Тогда
			
			ВодительскоеУдостоверение = Нстр("ru = 'Серия '") + Строка(ДокументыФизическихЛиц[0].Серия) + Нстр("ru = ' № '") + Строка(ДокументыФизическихЛиц[0].Номер);
			ЗначенияПараметров.Вставить("ВодительскоеУдостоверение", ВодительскоеУдостоверение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.ДействующаяЛицензионнаяКарточка) Тогда
		
		ЛицензионнаяКарточка = Шапка.ДействующаяЛицензионнаяКарточка.ВидЛицензионнойКарты;
		ЗначенияПараметров.Вставить("ВидПеревозки", Шапка.ЛицензионнаяКарточкаВидДеятельности);
		ЗначенияПараметров.Вставить("ЛицензионнаяКарточкаРегистрационныйНомер", Шапка.ЛицензионнаяКарточкаРегистрационныйНомер);
		ЗначенияПараметров.Вставить("ЛицензионнаяКарточкаСерия", Шапка.ЛицензионнаяКарточкаСерия);
		ЗначенияПараметров.Вставить("ЛицензионнаяКарточкаНомер", Шапка.ЛицензионнаяКарточкаНомер);
		
	Иначе
		
		ЛицензионнаяКарточка = "Стандартная";
		
	КонецЕсли;
	
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка = "Ограниченная");
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Ограничено.Шрифт, , , , , , НЕ ЛицензионнаяКарточка = "Ограниченная");
	
	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;
	
	МассивВладельцев = Новый Массив;
	
	ПунктПогрузки = "";
	Если ЗначениеЗаполнено(Шапка.СтруктурнаяЕдиница) Тогда
		
		МассивВладельцев = Новый Массив;
		МассивВладельцев.Добавить(Шапка.СтруктурнаяЕдиница);
		Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивВладельцев, , Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
		Если Адреса.Количество() > 0 Тогда
			
			ПунктПогрузки = Адреса[0].Представление;
			
		КонецЕсли;
	
		Телефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивВладельцев, , Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы);
		Если Телефоны.Количество() > 0 Тогда
			
			Для каждого Телефон Из Телефоны Цикл
				
				ПунктПогрузки = ПунктПогрузки + ?(ПустаяСтрока(ПунктПогрузки), "", ", ") + Телефон.Представление;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗначенияПараметров.Вставить("ПунктПогрузки", ПунктПогрузки);
	
	ПунктРазгрузки = Шапка.Грузополучатель;
	//Если НЕ ПустаяСтрока(Шапка.АдресДоставки) Тогда
	//	
	//	ПунктРазгрузки = Шапка.АдресДоставки;
	//	
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.Покупатель) Тогда
		
		ВидКИПоДокументу = ?(ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ПеремещениеЗапасов"), 
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			
		МассивВладельцев.Очистить();
		МассивВладельцев.Добавить(Шапка.Покупатель);
		
		ТелефоныКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивВладельцев, , ВидКИПоДокументу);
		Если ТелефоныКонтрагента.Количество() > 0 Тогда
			
			Для каждого Телефон Из ТелефоныКонтрагента Цикл
				
				ПунктПогрузки = ПунктПогрузки + ?(ПустаяСтрока(ПунктПогрузки), "", ", ") + Телефон.Представление;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗначенияПараметров.Вставить("ПунктРазгрузки", ПунктРазгрузки);
	
	ЗначенияПараметров.Вставить("МаркаПрицепа", Шапка.МаркаПрицепа);
	ЗначенияПараметров.Вставить("ГосНомерПрицепа", Шапка.ГосНомерПрицепа);
	
	ОбластьМакета.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластиМакета.ОбластьСведенияОГрузе;
	ОбластьМакета.Параметры.Заполнить(Шапка.СведенияОГрузе);
	ОбластьМакета.Параметры.КоличествоМест = ИтогоМест;
	ОбластьМакета.Параметры.МассаГрузаБрутто = Окр(ИтогоМассаБрутто * КоэффициентПересчетаВТонны, 3, РежимОкругления.Окр15как20);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластиМакета.ОбластьПодвалСведенийОГрузе;
	ЗначенияПараметров.Очистить();
	Если ИтогоМассаБрутто>1 ИЛИ Шапка.Вес>1 Тогда
		ЗначенияПараметров.Вставить("МассаГрузаБруттоПрописью", МассаГрузаПрописью(ИтогоМассаБрутто, Шапка.Вес));
	КонецЕсли;
	ЗначенияПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтогоМест, ,",,,,,,,,0"));
	ОбластьМакета.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластиМакета.ОбластьПогрузочныеОперации;
	ОбластьМакета.Параметры.ОрганизацияНаименование = Шапка.Организация.НаименованиеПолное;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластиМакета.ОбластьПрочиеСведения;
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры // СформироватьТТН()

// Процедура формирования печатной формы Инструкция водителю
//
Процедура СформироватьИнструкцияВодителю(ТабличныйДокумент, ТекущийДокумент)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Интерлинк_УпаковочныйЛист.ПФ_MXL_ИнструкцияВодителю");
	
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ИнструкцияВодителю";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛист.Номер КАК Номер,
	|	Интерлинк_УпаковочныйЛист.Дата КАК Дата,
	|	Интерлинк_УпаковочныйЛист.ОжидаемаяДатаВручения КАК ОжидаемаяДатаВручения,
	|	Интерлинк_УпаковочныйЛист.ВремяДоставкиС КАК ВремяДоставкиС,
	|	Интерлинк_УпаковочныйЛист.Перевозчик КАК Перевозчик
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист КАК Интерлинк_УпаковочныйЛист
	|ГДЕ
	|	Интерлинк_УпаковочныйЛист.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Интерлинк_УпаковочныйЛист.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛистТовары.Магазин КАК Магазин,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерлинк_УпаковочныйЛистТовары.Паллета) КАК Паллета
	|ПОМЕСТИТЬ ВТ_МагазинПаллеты
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.Товары КАК Интерлинк_УпаковочныйЛистТовары
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистТовары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Интерлинк_УпаковочныйЛистТовары.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.Грузополучатель КАК Магазин,
	|	СУММА(Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.СуммаДокумента) КАК Сумма
	|ПОМЕСТИТЬ ВТ_МагазинСумма
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.Грузополучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МагазинПаллеты.Магазин КАК Магазин,
	|	ВТ_МагазинПаллеты.Паллета КАК Паллета,
	|	ВТ_МагазинСумма.Сумма КАК Сумма
	|ИЗ
	|	ВТ_МагазинПаллеты КАК ВТ_МагазинПаллеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МагазинСумма КАК ВТ_МагазинСумма
	|		ПО ВТ_МагазинПаллеты.Магазин = ВТ_МагазинСумма.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.Грузополучатель КАК Магазин,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.НомерВходящегоДокумента КАК ЗаказПокупателяНомерВходящегоДокумента,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Дата КАК РасходнаяНакладнаяДата,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Номер КАК РасходнаяНакладнаяНомер
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка = &ТекущийДокумент";
	
	Результаты = Запрос.ВыполнитьПакет();
	Шапка = Результаты[0].Выбрать();
	Шапка.Следующий();
	
	Строки = Результаты[3].Выбрать();
	СписокДокументов = Результаты[4].Выбрать();
	МагазиныДокументы = Новый Соответствие;
	Пока СписокДокументов.Следующий() Цикл
		НомераДокументов = МагазиныДокументы.Получить(СписокДокументов.Магазин);
		Если НомераДокументов = Неопределено Тогда
			НомераДокументов = Новый Структура;
			ЗаказПокупателяНомерВходящегоДокумента = Новый СписокЗначений;
			ЗаказПокупателяНомерВходящегоДокумента.Добавить(СписокДокументов.ЗаказПокупателяНомерВходящегоДокумента);
			НомераДокументов.Вставить("ЗаказПокупателяНомерВходящегоДокумента", ЗаказПокупателяНомерВходящегоДокумента);
			
			РасходнаяНакладнаяНомер = Новый СписокЗначений;
			РасходнаяНакладнаяНомер.Добавить(ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(СписокДокументов.РасходнаяНакладнаяДата,
																											СписокДокументов.РасходнаяНакладнаяНомер, 
																											СписокДокументов.Префикс));
			
			НомераДокументов.Вставить("РасходнаяНакладнаяНомер", РасходнаяНакладнаяНомер);
		Иначе
			НомераДокументов.ЗаказПокупателяНомерВходящегоДокумента.Добавить(СписокДокументов.ЗаказПокупателяНомерВходящегоДокумента);
			НомераДокументов.РасходнаяНакладнаяНомер.Добавить(ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(СписокДокументов.РасходнаяНакладнаяДата, 
																													СписокДокументов.РасходнаяНакладнаяНомер, 
																													СписокДокументов.Префикс));
		КонецЕсли;
		МагазиныДокументы.Вставить(СписокДокументов.Магазин, НомераДокументов);
	КонецЦикла;
				
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	НомерСтроки = 0;
	
	Пока Строки.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.Заполнить(Строки);
		ОбластьМакета.Параметры.Заполнить(МагазиныДокументы[Строки.Магазин]);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Тело");
	ТабличныйДокумент.Вывести(ОбластьМакета);
			
КонецПроцедуры // СформироватьИнструкцияВодителю()

// Процедура формирования печатной формы Доверенность
//
Процедура СформироватьДоверенность(ТабличныйДокумент, ТекущийДокумент)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Доверенность.ПФ_MXL_М2");
	
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Доверенность";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.Организация КАК Организация,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера
	|ПОМЕСТИТЬ ВТ_Организация
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер КАК Номер,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	ВТ_Организация.Организация КАК Организация,
	|	ВТ_Организация.Организация.Префикс КАК Префикс,
	|	ВТ_Организация.РасшифровкаПодписиРуководителя КАК РасшифровкаПодписиРуководителя,
	|	ВТ_Организация.РасшифровкаПодписиГлавногоБухгалтера КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	"""" КАК ФамилияИмяОтчествоДоверенного,
	|	ВТ_Организация.БанковскийСчет КАК БанковскийСчет,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
	|	"""" КАК ПоставщикПредставление,
	|	ДОБАВИТЬКДАТЕ(Доверенность.Дата, МЕСЯЦ, 1) КАК СрокДействия,
	|	"""" КАК РеквизитыДокументаНаПолучение
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист КАК Доверенность,
	|	ВТ_Организация КАК ВТ_Организация
	|ГДЕ
	|	Доверенность.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
		ДанныеОФизЛице = Справочники.ФизическиеЛица.ДанныеФизЛица(Шапка.Организация, Неопределено, Шапка.ДатаДокумента);
			
		ДанныеОФизЛице.ДокументСерия = Неопределено;
		ДанныеОФизЛице.ДокументНомер = Неопределено;
		ДанныеОФизЛице.ДокументКемВыдан = Неопределено;
		ДанныеОФизЛице.ДокументДатаВыдачи = Неопределено;
					
		ФамилияИмяОтчествоДоверенного = СокрЛП(ДанныеОФизЛице.Фамилия) + " " + СокрЛП(ДанныеОФизЛице.Имя) + " " + СокрЛП(ДанныеОФизЛице.Отчество);
		Должность = СокрЛП(ДанныеОФизЛице.Должность);
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Отрез");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДокумента = НомерДокумента;
		ОбластьМакета.Параметры.ФИОДоверенного = "" + ?(ПустаяСтрока(Должность), "", Должность + ", " + Символы.ПС) + (ФамилияИмяОтчествоДоверенного);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		НазваниеФормы = "Типовая межотраслевая форма № М-2";
		КодПоОКУД = "0315001";
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДокумента               = НомерДокумента;
		ОбластьМакета.Параметры.НазваниеФормы                = НазваниеФормы;
		ОбластьМакета.Параметры.КодПоОКУД               	 = КодПоОКУД;
		ОбластьМакета.Параметры.ОрганизацияПредставление     = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.РеквизитыСчета               = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакета.Параметры.РеквизитыПотребителя         = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.РеквизитыПлательщика         = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ОрганизацияКодПоОКПО         = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ПаспортСерия                 = ДанныеОФизЛице.ДокументСерия;
		ОбластьМакета.Параметры.ПаспортНомер                 = ДанныеОФизЛице.ДокументНомер;
		ОбластьМакета.Параметры.ПаспортВыдан                 = ДанныеОФизЛице.ДокументКемВыдан;
		ОбластьМакета.Параметры.ПаспортДатаВыдачи            = ДанныеОФизЛице.ДокументДатаВыдачи;
		ОбластьМакета.Параметры.ФамилияИмяОтчествоДоверенного = ФамилияИмяОтчествоДоверенного;
		ОбластьМакета.Параметры.ДолжностьДоверенного         = Должность;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ВыборкаСтрокТовары = Новый Структура("Номер, ЦенностиПредставление", 1, "мебель садовая и текстильные изделия");
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
		
КонецПроцедуры // Доверенность()

// Процедура формирования печатной формы Упаковочный лист
//
Процедура СформироватьУпаковочныйЛист(ТабличныйДокумент, ТекущийДокумент)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Интерлинк_УпаковочныйЛист.ПФ_MXL_УпаковочныйЛист");
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_УпаковочныйЛист";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнера,
	|	КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера,
	|	КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
	|	КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_ДанныеEDI
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|			ПО (КонтурEDI_СоответствияТоваров.Партнер = КонтурEDI_ДополнительныеРеквизиты.Значение)
	|		ПО Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Контрагент = КонтурEDI_ДополнительныеРеквизиты.Объект
	|			И (КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ПартнерКонтрагента"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛист.Организация КАК Организация,
	|	Интерлинк_УпаковочныйЛист.Дата КАК Дата,
	|	Интерлинк_УпаковочныйЛист.ОжидаемаяДатаВручения КАК ОжидаемаяДатаВручения
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист КАК Интерлинк_УпаковочныйЛист
	|ГДЕ
	|	Интерлинк_УпаковочныйЛист.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛистТовары.Магазин КАК Магазин,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерлинк_УпаковочныйЛистТовары.Паллета) КАК ПаллетаВсего
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.Товары КАК Интерлинк_УпаковочныйЛистТовары
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистТовары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Интерлинк_УпаковочныйЛистТовары.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Интерлинк_УпаковочныйЛистТовары.Магазин КАК Магазин,
	|	Интерлинк_УпаковочныйЛистТовары.Паллета КАК Паллета,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.НомерВходящегоДокумента КАК ЗаказПокупателяНомерВходящегоДокумента,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.ЗаказПокупателя.Договор.НомерДоговора КАК НомерДоговора,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Номер КАК РасходнаяНакладнаяНомер,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная.Дата КАК РасходнаяНакладнаяДата,
	|	Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка.Организация.Префикс КАК Префикс
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.Товары КАК Интерлинк_УпаковочныйЛистТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
	|		ПО Интерлинк_УпаковочныйЛистТовары.Ссылка = Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка
	|			И Интерлинк_УпаковочныйЛистТовары.КлючСвязи = Интерлинк_УпаковочныйЛистСписокДокументов.КлючСвязи
	|			И (Интерлинк_УпаковочныйЛистТовары.Ссылка = &ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интерлинк_УпаковочныйЛистТовары.Магазин КАК Магазин,
	|	Интерлинк_УпаковочныйЛистТовары.Паллета КАК Паллета,
	|	Интерлинк_УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	|	Интерлинк_УпаковочныйЛистТовары.Номенклатура.Артикул КАК Артикул,
	|	Интерлинк_УпаковочныйЛистТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Интерлинк_УпаковочныйЛистТовары.Количество КАК Количество,
	|	Интерлинк_УпаковочныйЛистТовары.Количество * Интерлинк_УпаковочныйЛистТовары.Номенклатура.Вес КАК МассаБрутто,
	|	ВТ_ДанныеEDI.НаименованиеПартнера КАК НаименованиеПартнера,
	|	ВТ_ДанныеEDI.КодТовараПартнера КАК КодТовараПартнера,
	|	ВТ_ДанныеEDI.GTIN КАК GTIN
	|ИЗ
	|	Документ.Интерлинк_УпаковочныйЛист.Товары КАК Интерлинк_УпаковочныйЛистТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеEDI КАК ВТ_ДанныеEDI
	|		ПО Интерлинк_УпаковочныйЛистТовары.КлючСвязи = ВТ_ДанныеEDI.КлючСвязи
	|			И Интерлинк_УпаковочныйЛистТовары.Номенклатура = ВТ_ДанныеEDI.Номенклатура
	|ГДЕ
	|	Интерлинк_УпаковочныйЛистТовары.Ссылка = &ТекущийДокумент";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаДляПечати = Результаты[1].Выбрать();
	ВыборкаМагазины = Результаты[2].Выбрать();
	ВыборкаДокументыПаллет = Результаты[3].Выбрать();
	ВыборкаТоварыПаллет = Результаты[4].Выбрать();
	
	ДанныеДляПечати = Новый Структура("Организация,Дата,ОжидаемаяДатаВручения"); //Организация, Дата, ОжидаемаяДатаВручения, Магазины (массив)
	Пока ВыборкаДляПечати.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляПечати, ВыборкаДляПечати);
		
		Магазины = Новый Массив;
		Пока ВыборкаМагазины.Следующий() Цикл
			ДанныеМагазина = Новый Структура("Магазин,ПаллетаВсего"); //Магазин, НомерМагазина, ПаллетаВсего, ДанныеПаллет
			ЗаполнитьЗначенияСвойств(ДанныеМагазина, ВыборкаМагазины);
			ДанныеМагазина.Вставить("НомерМагазина", УправлениеСвойствами.ЗначениеСвойства(ВыборкаМагазины.Магазин, "НомерМагазина"));
			
			ДанныеПаллет = Новый Соответствие; // Паллета, СтруктураПаллеты
			
			СтруктураПоискаПаллет = Новый Структура("Магазин", ДанныеМагазина.Магазин);
			ВыборкаДокументыПаллет.Сбросить();
			Пока ВыборкаДокументыПаллет.НайтиСледующий(СтруктураПоискаПаллет) Цикл
				СтруктураПаллеты = ДанныеПаллет.Получить(ВыборкаДокументыПаллет.Паллета);
				Если СтруктураПаллеты = Неопределено Тогда
					СтруктураПаллеты = Новый Структура;
					СтруктураПаллеты.Вставить("ЗаказПокупателяНомерВходящегоДокумента", Новый СписокЗначений);
					СтруктураПаллеты.Вставить("РасходнаяНакладнаяНомер", Новый СписокЗначений);
					СтруктураПаллеты.Вставить("НомерДоговора", ВыборкаДокументыПаллет.НомерДоговора);
					СтруктураПаллеты.Вставить("Товары", Новый Массив);
					
					СтруктураПаллеты.ЗаказПокупателяНомерВходящегоДокумента.Добавить(ВыборкаДокументыПаллет.ЗаказПокупателяНомерВходящегоДокумента);
					
					СтруктураПаллеты.РасходнаяНакладнаяНомер.Добавить(ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ВыборкаДокументыПаллет.РасходнаяНакладнаяДата,
																													ВыборкаДокументыПаллет.РасходнаяНакладнаяНомер, 
																													ВыборкаДокументыПаллет.Префикс));
					
				Иначе
					СтруктураПаллеты.ЗаказПокупателяНомерВходящегоДокумента.Добавить(ВыборкаДокументыПаллет.ЗаказПокупателяНомерВходящегоДокумента);
					СтруктураПаллеты.РасходнаяНакладнаяНомер.Добавить(ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ВыборкаДокументыПаллет.РасходнаяНакладнаяДата, 
																															ВыборкаДокументыПаллет.РасходнаяНакладнаяНомер, 
																															ВыборкаДокументыПаллет.Префикс));
				КонецЕсли;
				ДанныеПаллет.Вставить(ВыборкаДокументыПаллет.Паллета, СтруктураПаллеты);
			КонецЦикла;
			
			ВыборкаТоварыПаллет.Сбросить();
			Пока ВыборкаТоварыПаллет.НайтиСледующий(СтруктураПоискаПаллет) Цикл
				СтруктураПаллеты = ДанныеПаллет.Получить(ВыборкаТоварыПаллет.Паллета);
				СтруктураТовара = Новый Структура("Номенклатура,КодТовараПартнера,НаименованиеПартнера,Артикул,ЕдиницаИзмерения,МассаБрутто,GTIN,Количество");
				ЗаполнитьЗначенияСвойств(СтруктураТовара, ВыборкаТоварыПаллет);
				СтруктураПаллеты.Товары.Добавить(СтруктураТовара);				
				ДанныеПаллет.Вставить(ВыборкаТоварыПаллет.Паллета, СтруктураПаллеты);
			КонецЦикла;
			
			ДанныеМагазина.Вставить("ДанныеПаллет", ДанныеПаллет);
			Магазины.Добавить(ДанныеМагазина);
		КонецЦикла;
		ДанныеДляПечати.Вставить("Магазины", Магазины);
	КонецЦикла;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ПервыйДокумент = Истина;
		
	СведенияОГрузоотправителе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, ДанныеДляПечати.Дата);
	ГрузоотправительПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,Телефоны");
	Для Каждого ДанныеМагазина Из ДанныеДляПечати.Магазины Цикл
		ПаллетаНомер = 0;
		Для Каждого Паллета Из ДанныеМагазина.ДанныеПаллет Цикл
			ПаллетаНомер = ПаллетаНомер + 1;
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			ОбластьМакетаШапка.Параметры.ПаллетаНомер = ПаллетаНомер;
			ОбластьМакетаШапка.Параметры.Заполнить(ДанныеМагазина);
			ОбластьМакетаШапка.Параметры.Заполнить(Паллета.Значение);
			ОбластьМакетаШапка.Параметры.ГрузоотправительПредставление = ГрузоотправительПредставление;
			СведенияОГрузополучателе  = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(ДанныеМагазина.Магазин,  ДанныеДляПечати.Дата);
			ГрузополучательПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес");
			ОбластьМакетаШапка.Параметры.ГрузополучательПредставление = ГрузополучательПредставление;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
			
			НомерСтроки = 0;
			КоличествоИтого = 0;
			Для Каждого СтруктураТовара Из Паллета.Значение.Товары Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьМакетаСтрока.Параметры.НомерСтроки = НомерСтроки;
				КоличествоИтого = КоличествоИтого + СтруктураТовара.Количество;
				ОбластьМакетаСтрока.Параметры.Заполнить(СтруктураТовара);
				
				Рисунок = ОбластьМакетаСтрока.Рисунки.Штрихкод;
				ЗначениеШтрихкода = СтруктураТовара.GTIN;
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
										
					ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
					ПараметрыШтрихкода.Вставить("ТипКода",				99);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Ложь);
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
			КонецЦикла;
			ОбластьМакетаПодвал.Параметры.ПаллетаНомер = ПаллетаНомер;
			ОбластьМакетаПодвал.Параметры.КоличествоИтого = КоличествоИтого;
			ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеМагазина);
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры // СформироватьУпаковочныйЛист()

// Сформировать печатные формы объектов
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета, ПараметрыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИмяМакета = "ТТН" Тогда
			
			СформироватьТТН(ТабличныйДокумент, ТекущийДокумент, Ошибки);
			
		ИначеЕсли ИмяМакета = "ИнструкцияВодителю" Тогда
			
			СформироватьИнструкцияВодителю(ТабличныйДокумент, ТекущийДокумент);
			
		ИначеЕсли ИмяМакета = "Доверенность" Тогда
			
			СформироватьДоверенность(ТабличныйДокумент, ТекущийДокумент);
			
		ИначеЕсли ИмяМакета = "УпаковочныйЛист" Тогда
			
			СформироватьУпаковочныйЛист(ТабличныйДокумент, ТекущийДокумент);
			
		КонецЕсли;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН", "1-Т (Товарно-транспортная накладная)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТТН", ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнструкцияВодителю") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИнструкцияВодителю", "Инструкция водителю", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ИнструкцияВодителю", ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доверенность") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Доверенность", "Доверенность", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Доверенность", ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УпаковочныйЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УпаковочныйЛист", "Упаковочный лист", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "УпаковочныйЛист", ПараметрыПечати));
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьТОРГ12.ИдентификаторПечатнойФормы(Ложь, Ложь));
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьТОРГ12.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьТОРГ12.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьТОРГ12.ПредставлениеПФ(Ложь, Ложь);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Интерлинк_УпаковочныйЛистСписокДокументов.РасходнаяНакладная КАК РасходнаяНакладная
		|ИЗ
		|	Документ.Интерлинк_УпаковочныйЛист.СписокДокументов КАК Интерлинк_УпаковочныйЛистСписокДокументов
		|ГДЕ
		|	Интерлинк_УпаковочныйЛистСписокДокументов.Ссылка В(&МассивОбъектов)"
		;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		МассивНакладных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РасходнаяНакладная");
		
		ДанныеОбъектовПечати = Документы.РасходнаяНакладная.ДанныеДокументовРегУчет(МассивНакладных, Ложь, Истина, Ошибки);
		Обработки.ПечатьТОРГ12.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ЗначениеИдентификатора = "ТТН,ИнструкцияВодителю,Доверенность,ТОРГ12,Обработка.ПечатьСчетФактура.СчетФактура,УпаковочныйЛист";

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = ЗначениеИдентификатора;
	КомандаПечати.Представление = ПечатьДокументовУНФ.ПредставлениеКомплектаДокументов();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 1;
			
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = '1-Т (Товарно-транспортная накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнструкцияВодителю";
	КомандаПечати.Представление = НСтр("ru = 'Инструкция водителю'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 11;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Доверенность";
	КомандаПечати.Представление = НСтр("ru = 'Доверенность'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 12;
				
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьТОРГ12.ИдентификаторПечатнойФормы(Ложь, Ложь);
	КомандаПечати.Представление = Обработки.ПечатьТОРГ12.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 20;
			
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.СчетФактура";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 25;
			
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УпаковочныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Упаковочный лист'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 30;

КонецПроцедуры

#КонецОбласти
